#pragma kernel CSMain

struct Ant {
    float3 position;
    float3 direction;
    float speed;
};

RWStructuredBuffer<Ant> antBuffer;
float3 randomDirection; // input from C# script
float time;
int numAnts;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    Ant ant = antBuffer[id.x];
    float3 attract = float3(0, 0, 0);
    float3 repel = float3(0, 0, 0);
    
    for (int i = 0; i < numAnts; i++) {
        if (i == id.x) {
            continue;
        }

        Ant other = antBuffer[i];
        float3 difference = other.position - ant.position;
        float distance = length(difference);

        // Attract to nearby ants
        if (distance > 0.1) { // Adjust this value as needed
            attract += difference / distance;
        }
        // Repel from very close ants
        else if (distance < 0.05) { // Adjust this value as needed
            repel -= difference / distance;
        }
    }

    // Combine the attract and repel forces
    ant.direction = normalize(attract + repel);

    // Move the ant in the current direction
    ant.position += ant.direction * ant.speed * time;

    // Keep the ant within the texture boundaries
    ant.position = clamp(ant.position, float3(-1, -1, -1), float3(1, 1, 1));

    antBuffer[id.x] = ant;
}
